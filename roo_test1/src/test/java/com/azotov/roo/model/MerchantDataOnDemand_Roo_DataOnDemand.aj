// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.azotov.roo.model;

import com.azotov.roo.model.BranchDataOnDemand;
import com.azotov.roo.model.IssuerAgentDataOnDemand;
import com.azotov.roo.model.Merchant;
import com.azotov.roo.model.MerchantDataOnDemand;
import com.azotov.roo.model.TerminalDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect MerchantDataOnDemand_Roo_DataOnDemand {
    
    declare @type: MerchantDataOnDemand: @Component;
    
    private Random MerchantDataOnDemand.rnd = new SecureRandom();
    
    private List<Merchant> MerchantDataOnDemand.data;
    
    @Autowired
    BranchDataOnDemand MerchantDataOnDemand.branchDataOnDemand;
    
    @Autowired
    IssuerAgentDataOnDemand MerchantDataOnDemand.issuerAgentDataOnDemand;
    
    @Autowired
    TerminalDataOnDemand MerchantDataOnDemand.terminalDataOnDemand;
    
    public Merchant MerchantDataOnDemand.getNewTransientMerchant(int index) {
        Merchant obj = new Merchant();
        setAccountNumber(obj, index);
        setAddress(obj, index);
        setBillingCycle(obj, index);
        setBusinessNature(obj, index);
        setBusinessRegisterDocument(obj, index);
        setCompanyName(obj, index);
        setCompanyRegisterNumber(obj, index);
        setContact(obj, index);
        setContactPerson(obj, index);
        setDateJoin(obj, index);
        setEmail(obj, index);
        setName(obj, index);
        setNextBillingDate(obj, index);
        setRate(obj, index);
        setRemarks(obj, index);
        return obj;
    }
    
    public void MerchantDataOnDemand.setAccountNumber(Merchant obj, int index) {
        Long AccountNumber = new Integer(index).longValue();
        obj.setAccountNumber(AccountNumber);
    }
    
    public void MerchantDataOnDemand.setAddress(Merchant obj, int index) {
        String Address = "Address_" + index;
        obj.setAddress(Address);
    }
    
    public void MerchantDataOnDemand.setBillingCycle(Merchant obj, int index) {
        String BillingCycle = "BillingCycle_" + index;
        obj.setBillingCycle(BillingCycle);
    }
    
    public void MerchantDataOnDemand.setBusinessNature(Merchant obj, int index) {
        String BusinessNature = "BusinessNature_" + index;
        obj.setBusinessNature(BusinessNature);
    }
    
    public void MerchantDataOnDemand.setBusinessRegisterDocument(Merchant obj, int index) {
        String BusinessRegisterDocument = "BusinessRegisterDocument_" + index;
        obj.setBusinessRegisterDocument(BusinessRegisterDocument);
    }
    
    public void MerchantDataOnDemand.setCompanyName(Merchant obj, int index) {
        String CompanyName = "CompanyName_" + index;
        obj.setCompanyName(CompanyName);
    }
    
    public void MerchantDataOnDemand.setCompanyRegisterNumber(Merchant obj, int index) {
        Long CompanyRegisterNumber = new Integer(index).longValue();
        obj.setCompanyRegisterNumber(CompanyRegisterNumber);
    }
    
    public void MerchantDataOnDemand.setContact(Merchant obj, int index) {
        String Contact = "Contact_" + index;
        obj.setContact(Contact);
    }
    
    public void MerchantDataOnDemand.setContactPerson(Merchant obj, int index) {
        String ContactPerson = "ContactPerson_" + index;
        obj.setContactPerson(ContactPerson);
    }
    
    public void MerchantDataOnDemand.setDateJoin(Merchant obj, int index) {
        Date DateJoin = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setDateJoin(DateJoin);
    }
    
    public void MerchantDataOnDemand.setEmail(Merchant obj, int index) {
        String Email = "foo" + index + "@bar.com";
        obj.setEmail(Email);
    }
    
    public void MerchantDataOnDemand.setName(Merchant obj, int index) {
        String Name = "Name_" + index;
        obj.setName(Name);
    }
    
    public void MerchantDataOnDemand.setNextBillingDate(Merchant obj, int index) {
        Date NextBillingDate = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setNextBillingDate(NextBillingDate);
    }
    
    public void MerchantDataOnDemand.setRate(Merchant obj, int index) {
        Double Rate = new Integer(index).doubleValue();
        obj.setRate(Rate);
    }
    
    public void MerchantDataOnDemand.setRemarks(Merchant obj, int index) {
        String Remarks = "Remarks_" + index;
        obj.setRemarks(Remarks);
    }
    
    public Merchant MerchantDataOnDemand.getSpecificMerchant(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Merchant obj = data.get(index);
        Long id = obj.getId();
        return Merchant.findMerchant(id);
    }
    
    public Merchant MerchantDataOnDemand.getRandomMerchant() {
        init();
        Merchant obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return Merchant.findMerchant(id);
    }
    
    public boolean MerchantDataOnDemand.modifyMerchant(Merchant obj) {
        return false;
    }
    
    public void MerchantDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Merchant.findMerchantEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Merchant' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Merchant>();
        for (int i = 0; i < 10; i++) {
            Merchant obj = getNewTransientMerchant(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
